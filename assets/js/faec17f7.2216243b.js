"use strict";(self.webpackChunkFlask_ML=self.webpackChunkFlask_ML||[]).push([[996],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},l="Getting Started with Flask-ML",o={unversionedId:"guides/getting-started",id:"guides/getting-started",title:"Getting Started with Flask-ML",description:"Introduction",source:"@site/materials/guides/getting-started.md",sourceDirName:"guides",slug:"/guides/getting-started",permalink:"/Flask-ML/materials/guides/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/Flask-ML/materials/category/guides"},next:{title:"Writing a CLI",permalink:"/Flask-ML/materials/guides/cli"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Objectives",id:"objectives",level:2},{value:"Tutorial",id:"tutorial",level:2},{value:"Creating a Project and Installing Flask-ML",id:"creating-a-project-and-installing-flask-ml",level:3},{value:"Adding a <code>pyrightconfig.json</code> File",id:"adding-a-pyrightconfigjson-file",level:3},{value:"Creating a <code>server.py</code> File",id:"creating-a-serverpy-file",level:3},{value:"Writing a Basic Inference Function",id:"writing-a-basic-inference-function",level:3},{value:"Adding Types for Inputs and Parameters",id:"adding-types-for-inputs-and-parameters",level:3},{value:"Writing a Return Type",id:"writing-a-return-type",level:3},{value:"Implementing the Model",id:"implementing-the-model",level:3},{value:"First Run",id:"first-run",level:3},{value:"Running the <code>transform_case</code> Task",id:"running-the-transform_case-task",level:3},{value:"Adding a UI Schema",id:"adding-a-ui-schema",level:3},{value:"Entire Sample Code",id:"entire-sample-code",level:2},{value:"Adding a automatically generated CLI",id:"adding-a-automatically-generated-cli",level:2},{value:"Adding Application Metadata",id:"adding-application-metadata",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-flask-ml"},"Getting Started with Flask-ML"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Flask-ML is a Flask extension that allows you to run machine learning code in a Flask server. In this tutorial, we will walk you through the entire process of creating a Flask-ML server to expose your machine learning model, as well as defining a UI schema for your ML task so that it will have a nice user interface to go along with it."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement and run a Flask server exposing standard endpoints to run your machine learning code"),(0,r.kt)("li",{parentName:"ul"},"Write a schema that lets UI clients automatically generate a user interface for your machine learning code")),(0,r.kt)("h2",{id:"objectives"},"Objectives"),(0,r.kt)("p",null,"By the end of this tutorial, you will be able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a Flask-ML server"),(0,r.kt)("li",{parentName:"ul"},"Define inputs and outputs for your machine learning code"),(0,r.kt)("li",{parentName:"ul"},"Write type-safe Python code"),(0,r.kt)("li",{parentName:"ul"},"Expose a UI schema for your machine learning code")),(0,r.kt)("h2",{id:"tutorial"},"Tutorial"),(0,r.kt)("h3",{id:"creating-a-project-and-installing-flask-ml"},"Creating a Project and Installing Flask-ML"),(0,r.kt)("p",null,"To get started, create a new directory for your project and navigate to it in your terminal. Then, run the following command to create a new Python project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python -m venv venv\nsource venv/bin/activate\npip install Flask-ML\n")),(0,r.kt)("p",null,"This will create a new virtual environment and install Flask-ML."),(0,r.kt)("h3",{id:"adding-a-pyrightconfigjson-file"},"Adding a ",(0,r.kt)("inlineCode",{parentName:"h3"},"pyrightconfig.json")," File"),(0,r.kt)("p",null,"If you use VSCode, make sure you have ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"},"Pylance")," installed. Then, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"pyrightconfig.json")," file to your project directory. Adding this activates type-checking for this Python project, helping you write type-safe code. This is important, so please do not skip this step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "python.analysis.typeCheckingMode": "basic"\n}\n')),(0,r.kt)("h3",{id:"creating-a-serverpy-file"},"Creating a ",(0,r.kt)("inlineCode",{parentName:"h3"},"server.py")," File"),(0,r.kt)("p",null,"Create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"server.py")," in your project directory. This file will contain the code for your Flask-ML server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flask_ml.flask_ml_server import MLServer\n\nserver = MLServer(__name__)\n\n# Run a debug flask server\nserver.run()\n")),(0,r.kt)("h3",{id:"writing-a-basic-inference-function"},"Writing a Basic Inference Function"),(0,r.kt)("p",null,"Now, let's write a basic inference function. For example, let's say that our function takes in a collection of raw text inputs, transforms then into either lower or upper case, and returns a collection of processed text outputs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@server.route("/transform_case")\ndef transform_case(inputs, parameters):\n    pass\n')),(0,r.kt)("p",null,"In Flask-ML, an inference function takes two arguments: ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters"),". We also add the decorator to register our function with Flask-ML at the endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"/transform_case"),"."),(0,r.kt)("h3",{id:"adding-types-for-inputs-and-parameters"},"Adding Types for Inputs and Parameters"),(0,r.kt)("p",null,"Let's add types to our inputs and parameters. In Flask-ML, the types of inputs and parameters must be Python ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/typing.html#typing.TypedDict"},"TypedDict")," types."),(0,r.kt)("p",null,"Flask-ML offers the following types of inputs for the keys within the TypedDict:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TextInput"),": a single raw text input"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FileInput"),": a single file path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DirectoryInput"),": a directory path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchTextInput"),": a collection of raw text inputs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchFileInput"),": a collection of file paths"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchDirectoryInput"),": a collection of directory paths")),(0,r.kt)("p",null,"The type of parameters must be either ",(0,r.kt)("inlineCode",{parentName:"p"},"str"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from typing import TypedDict\nfrom flask_ml.flask_ml_server.models import BatchTextInput\n\nclass TransformCaseInputs(TypedDict):\n    text_inputs: BatchTextInput\n\nclass TransformCaseParameters(TypedDict):\n    to_case: str # 'upper' or 'lower'\n\n@server.route(\"/transform_case\")\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters):\n    pass\n")),(0,r.kt)("h3",{id:"writing-a-return-type"},"Writing a Return Type"),(0,r.kt)("p",null,"Now, let's add a return type. Flask-ML offers the following return types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TextResponse"),": a single raw text output"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FileResponse"),": a file path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DirectoryResponse"),": a directory path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MarkdownResponse"),": a markdown string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchTextResponse"),": a collection of raw text outputs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchFileResponse"),": a collection of file paths"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchDirectoryResponse"),": a collection of directory paths")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from typing import TypedDict\nfrom flask_ml.flask_ml_server.models import BatchTextInput, ResponseBody, BatchTextResponse\n\nclass TransformCaseInputs(TypedDict):\n    text_inputs: BatchTextInput\n\nclass TransformCaseParameters(TypedDict):\n    to_case: str # 'upper' or 'lower'\n\n@server.route(\"/transform_case\")\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    return ResponseBody(root=BatchTextResponse(texts=[]))\n")),(0,r.kt)("p",null,"Since we want to return a collection of raw text outputs, we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchTextResponse")," type. Note that the return type of the function is ",(0,r.kt)("inlineCode",{parentName:"p"},"ResponseBody"),", which is a generic type that can be used to represent any type of response. We will add the ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchTextResponse")," in it."),(0,r.kt)("h3",{id:"implementing-the-model"},"Implementing the Model"),(0,r.kt)("p",null,"Now, let's implement the model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from typing import TypedDict\nfrom flask_ml.flask_ml_server.models import BatchTextInput, ResponseBody, BatchTextResponse, TextResponse\n\nclass TransformCaseInputs(TypedDict):\n    text_inputs: BatchTextInput\n\nclass TransformCaseParameters(TypedDict):\n    to_case: str # 'upper' or 'lower'\n\n@server.route(\"/transform_case\")\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    to_upper: bool = parameters['to_case'] == 'upper'\n    \n    outputs = []\n    for text_input in inputs['text_inputs'].texts:\n        raw_text = text_input.text\n        processed_text = raw_text.upper() if to_upper else raw_text.lower()\n        outputs.append(TextResponse(value=processed_text, title=raw_text))\n\n    return ResponseBody(root=BatchTextResponse(texts=outputs))\n")),(0,r.kt)("p",null,"Here, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"to_case")," parameter to determine whether to transform the text to upper case or lower case. We then iterate over the ",(0,r.kt)("inlineCode",{parentName:"p"},"text_inputs")," and transform each input using the appropriate case transformation. Finally, we return a ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchTextResponse")," containing the transformed text outputs. "),(0,r.kt)("h3",{id:"first-run"},"First Run"),(0,r.kt)("p",null,"We are ready to run our first task! Note that we haven't defined a UI schema yet, so we don't have access to those features yet. However, let's check out what we can do so far."),(0,r.kt)("p",null,"Run the server with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python server.py\n")),(0,r.kt)("p",null,"Open Postman or an HTTP client of your choice. Make a GET request to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:5000/api/routes")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location 'http://localhost:5000/api/routes'\n")),(0,r.kt)("p",null,"which will produce the following JSON response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "payload_schema": "/transform_case/payload_schema",\n        "run_task": "/transform_case",\n        "sample_payload": "/transform_case/sample_payload"\n    }\n]\n')),(0,r.kt)("p",null,"This indicates that the server has registered our route at ",(0,r.kt)("inlineCode",{parentName:"p"},"/transform_case"),". You can ignore ",(0,r.kt)("inlineCode",{parentName:"p"},"payload_schema"),", although you can simply try calling it to see what it returns. Let's call ",(0,r.kt)("inlineCode",{parentName:"p"},"/transform_case/sample_payload")," to get an idea of what the expected request body looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location 'http://localhost:5000/transform_case/sample_payload'\n")),(0,r.kt)("p",null,"which returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "inputs": {\n        "text_inputs": {\n            "texts": [\n                {\n                    "text": "A sample piece of text 1"\n                },\n                {\n                    "text": "A sample piece of text 2"\n                }\n            ]\n        }\n    },\n    "parameters": {\n        "to_case": "Sample value for parameter"\n    }\n}\n')),(0,r.kt)("p",null,"Note that here, for the ",(0,r.kt)("inlineCode",{parentName:"p"},"to_case")," parameter above, the sample value isn't valid because we need it to be one of ",(0,r.kt)("inlineCode",{parentName:"p"},'"upper"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"lower"'),", so make sure that when you go through the next step, you change it appropriately."),(0,r.kt)("h3",{id:"running-the-transform_case-task"},"Running the ",(0,r.kt)("inlineCode",{parentName:"h3"},"transform_case")," Task"),(0,r.kt)("p",null,"Now, let's make a POST request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/transform_case")," with the following JSON payload. Make sure you set the ",(0,r.kt)("inlineCode",{parentName:"p"},"to_case")," parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},'"upper"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"lower"')," depending on what you want to transform the text to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location \n    -X POST\n    -H \'Content-Type: application/json\'\n    -d \'{\n        "inputs": {\n            "text_inputs": {\n                "texts": [\n                    {\n                        "text": "A sample piece of text 1"\n                    },\n                    {\n                        "text": "A sample piece of text 2"\n                    }\n                ]\n            }\n        },\n        "parameters": {\n            "to_case": "upper"\n        }\n    }\'\n    \'http://localhost:5000/transform_case\'\n')),(0,r.kt)("p",null,"which produces the following response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "output_type": "batchtext",\n    "texts": [\n        {\n            "output_type": "text",\n            "value": "A SAMPLE PIECE OF TEXT 1",\n            "title": "a sample piece of text 1",\n            "subtitle": null\n        },\n        {\n            "output_type": "text",\n            "value": "A SAMPLE PIECE OF TEXT 2",\n            "title": "a sample piece of text 2",\n            "subtitle": null\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"Great! We got our first task running!"),(0,r.kt)("h3",{id:"adding-a-ui-schema"},"Adding a UI Schema"),(0,r.kt)("p",null,"To define a UI for this sample model, we need to write a task schema function. This function will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"TaskSchema")," object, which contains specifications for the types and possible values for all the inputs and parameters for our ML function."),(0,r.kt)("p",null,"First, we will write a schema for our inputs by building an ",(0,r.kt)("inlineCode",{parentName:"p"},"InputSchema"),". We simply specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," (which must match the key for the respective attribute in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TypedDict")," defined for our inputs), a ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," to be displayed on the UI, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"input_type"),", which must be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.TEXT"),": a single raw text input"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.FILE"),": a single file path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.DIRECTORY"),": a single directory path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.MARKDOWN"),": a markdown string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.BATCHTEXT"),": a collection of raw text inputs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.BATCHFILE"),": a collection of file paths"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputType.BATCHDIRECTORY"),": a collection of directory paths")),(0,r.kt)("p",null,"Let's write an input schema for our function's inputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inputSchema = InputSchema(\n    key="text_inputs",\n    label="Text to Transform",\n    input_type=InputType.BATCHTEXT\n)\n')),(0,r.kt)("p",null,"Next, we will write a similar schema for our parameters by building an ",(0,r.kt)("inlineCode",{parentName:"p"},"ParameterSchema"),". We again specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," (which must match the key for the respective attribute in the ",(0,r.kt)("inlineCode",{parentName:"p"},"TypedDict")," defined for our parameters), a ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," to be displayed on the UI, an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"subtitle")," that is more expansive than the label, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", which must be an instance of one of these types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TextParameterDescriptor"),": a string of raw text",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EnumParameterDescriptor"),": an enumeration with multiple values",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enum_vals"),": list of ",(0,r.kt)("inlineCode",{parentName:"li"},"EnumVal")," objects, each containing a unique ",(0,r.kt)("inlineCode",{parentName:"li"},"key")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"label")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message_when_empty"),": message to display on UI if this enum contains no values (optional)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IntParameterDescriptor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RangedIntParameterDescriptor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"range"),": an ",(0,r.kt)("inlineCode",{parentName:"li"},"IntRangeDescriptor")," containing a ",(0,r.kt)("inlineCode",{parentName:"li"},"min")," value and ",(0,r.kt)("inlineCode",{parentName:"li"},"max")," value"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FloatParameterDescriptor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RangedFloatParameterDescriptor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": default value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"range"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"FloatRangeDescriptor")," containing a ",(0,r.kt)("inlineCode",{parentName:"li"},"min")," value and ",(0,r.kt)("inlineCode",{parentName:"li"},"max")," value")))),(0,r.kt)("p",null,"Let's write a parameter schema for our function's parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'parameterSchema = ParameterSchema(\n    key="to_case",\n    label="Case to Transform Text Into",\n    subtitle="\'upper\' will convert all text to upper case. \'lower\' will convert all text to lower case.",\n    value=EnumParameterDescriptor(\n        enum_vals=[\n            EnumVal(\n                key="upper",\n                label="UPPER"\n            ),\n            EnumVal(\n                key="lower",\n                label="LOWER"\n            )\n        ],\n        default="upper"\n    )\n)\n')),(0,r.kt)("p",null,"Let's use the above schemas to define a UI schema for our ",(0,r.kt)("inlineCode",{parentName:"p"},"transform_case")," task:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from flask_ml.flask_ml_server.models import TaskSchema, InputSchema, ParameterSchema, InputType, EnumParameterDescriptor, EnumVal\n\ndef create_transform_case_task_schema() -> TaskSchema:\n    return TaskSchema(\n        inputs = [inputSchema],\n        parameters = [parameterSchema]\n    )\n")),(0,r.kt)("p",null,"Now, we can register this function in our endpoint by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"task_schema_func")," parameter in the route annotation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@server.route("/transform_case", task_schema_func=create_transform_case_task_schema)\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    ...\n')),(0,r.kt)("p",null,"We can also set a few other parameters within the annotation in order to provide the UI some extra information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"short_title"),": concise name for your task, to be displayed as a heading in the UI"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"order"),": if you support multiple ML tasks (endpoints), this defines the order in which the task tabs should appear in the UI (starts from 0) ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@server.route("/transform_case", task_schema_func=create_transform_case_task_schema, short_title="Transform Case", order=0)\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    ...\n')),(0,r.kt)("p",null,"Note that if you call ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/routes")," again, you will get a more extensive response this time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "order": 0,\n        "payload_schema": "/transform_case/payload_schema",\n        "run_task": "/transform_case",\n        "sample_payload": "/transform_case/sample_payload",\n        "short_title": "Transform Case",\n        "task_schema": "/transform_case/task_schema"\n    }\n]\n')),(0,r.kt)("p",null,"Note that calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"/transform_case/task_schema")," route simply executes the TaskSchema function that we had written and returns its output as a response. This contains all the information that the UI will need in order to determine how to render each of the inputs and parameters in its forms."),(0,r.kt)("h2",{id:"entire-sample-code"},"Entire Sample Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from typing import TypedDict\nfrom flask_ml.flask_ml_server import MLServer\nfrom flask_ml.flask_ml_server.models import BatchTextInput, BatchTextResponse, EnumParameterDescriptor, EnumVal, InputSchema, InputType, ParameterSchema, ResponseBody, TaskSchema, TextResponse\n\nserver = MLServer(__name__)\n\nclass TransformCaseInputs(TypedDict):\n    text_inputs: BatchTextInput\n\nclass TransformCaseParameters(TypedDict):\n    to_case: str # \'upper\' or \'lower\'\n\ndef create_transform_case_task_schema() -> TaskSchema:\n    input_schema = InputSchema(\n        key="text_inputs",\n        label="Text to Transform",\n        input_type=InputType.BATCHTEXT\n    )\n    parameter_schema = ParameterSchema(\n        key="to_case",\n        label="Case to Transform Text Into",\n        subtitle="\'upper\' will convert all text to upper case. \'lower\' will convert all text to lower case.",\n        value=EnumParameterDescriptor(\n            enum_vals=[\n                EnumVal(\n                    key="upper",\n                    label="UPPER"\n                ),\n                EnumVal(\n                    key="lower",\n                    label="LOWER"\n                )\n            ],\n            default="upper"\n        )\n    )\n    return TaskSchema(\n        inputs = [input_schema],\n        parameters = [parameter_schema]\n    )\n\n@server.route(\n    "/transform_case",\n    task_schema_func=create_transform_case_task_schema,\n    short_title="Transform Case",\n    order=0\n)\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    to_upper: bool = parameters[\'to_case\'] == \'upper\'\n    \n    outputs = []\n    for text_input in inputs[\'text_inputs\'].texts:\n        raw_text = text_input.text\n        processed_text = raw_text.upper() if to_upper else raw_text.lower()\n        outputs.append(TextResponse(value=processed_text, title=raw_text))\n\n    return ResponseBody(root=BatchTextResponse(texts=outputs))\n\nif __name__ == "__main__":\n    # Run a debug server\n    server.run()\n\n')),(0,r.kt)("h1",{id:"additional-features"},"Additional Features"),(0,r.kt)("h2",{id:"adding-a-automatically-generated-cli"},"Adding a automatically generated CLI"),(0,r.kt)("p",null,"Flask-ML can automatically generate a CLI for your machine learning code. See ",(0,r.kt)("a",{parentName:"p",href:"./cli"},"Writing a CLI")," for more information."),(0,r.kt)("h2",{id:"adding-application-metadata"},"Adding Application Metadata"),(0,r.kt)("p",null,"You can provide metadata about your application for use by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UMass-Rescue/RescueBox-Desktop"},"Rescue-Box Desktop"),". See ",(0,r.kt)("a",{parentName:"p",href:"./metadata"},"Adding Application Metadata")," for more information."))}c.isMDXComponent=!0}}]);