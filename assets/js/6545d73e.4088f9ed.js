"use strict";(self.webpackChunkFlask_ML=self.webpackChunkFlask_ML||[]).push([[614],{1610:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/cli","title":"Writing a CLI","description":"Introduction","source":"@site/materials/guides/cli.md","sourceDirName":"guides","slug":"/guides/cli","permalink":"/Flask-ML/materials/guides/cli","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with Flask-ML","permalink":"/Flask-ML/materials/guides/getting-started"},"next":{"title":"Example ML Projects","permalink":"/Flask-ML/materials/guides/examples"}}');var s=r(4848),t=r(8453);const a={sidebar_position:2},l="Writing a CLI",o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Server File",id:"server-file",level:2},{value:"CLI File",id:"cli-file",level:2},{value:"Running the CLI",id:"running-the-cli",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"writing-a-cli",children:"Writing a CLI"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"A CLI is helpful to run and debug code from the terminal. Flask-ML is able to automatically create a CLI for your machine learning code. Generating a CLI is a simple process that involves creating a single file."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["At least one endpoint in your server file must be decorated with ",(0,s.jsx)(n.code,{children:"@server.route"}),", and the route must have a ",(0,s.jsx)(n.code,{children:"task_schema_func"})," parameter. See ",(0,s.jsx)(n.a,{href:"./getting-started#adding-a-ui-schema",children:"Adding a Task Schema"})," for more information."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@server.route("/transform_case", task_schema_func=create_transform_case_task_schema)\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    ...\n'})}),"\n",(0,s.jsx)(n.h2,{id:"server-file",children:"Server File"}),"\n",(0,s.jsxs)(n.p,{children:["Ensure that your server file has a ",(0,s.jsx)(n.code,{children:'if __name__ == "__main__":'})," block."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# server.py\nml_server = MLServer(__name__)\n\nif __name__ == "__main__":\n    ml_server.run()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cli-file",children:"CLI File"}),"\n",(0,s.jsxs)(n.p,{children:["Create a new file called ",(0,s.jsx)(n.code,{children:"cli.py"})," in your project directory, and import your MLServer instance into it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# cli.py\n\nimport argparse\n\nfrom flask_ml.flask_ml_cli import MLCli\nfrom server import ml_server\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="<Enter a description of your tool here>")\n    cli = MLCli(ml_server, parser)\n    cli.run_cli()\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-the-cli",children:"Running the CLI"}),"\n",(0,s.jsx)(n.p,{children:"That's it! Now, you can run your CLI with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python -m cli\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ python simple_cli.py --help\nusage: simple_cli.py [-h] {transform_case} ...\n\nTransform Case of multiple text inputs\n\npositional arguments:\n  {transform_case}  Subcommands\n    transform_case  Transform Case\n\noptions:\n  -h, --help        show this help message and exit\n\n$ python simple_cli.py transform_case --help\nusage: simple_cli.py transform_case [-h] --text_inputs TEXT_INPUTS [TEXT_INPUTS ...] [--to_case TO_CASE]\n\noptions:\n  -h, --help            show this help message and exit\n  --text_inputs TEXT_INPUTS [TEXT_INPUTS ...]\n                        Text to Transform\n  --to_case {upper,lower}\n                        'upper' will convert all text to upper case. 'lower' will convert all text to lower case.\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);