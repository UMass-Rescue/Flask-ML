"use strict";(self.webpackChunkFlask_ML=self.webpackChunkFlask_ML||[]).push([[895],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return t?n.createElement(f,l(l({ref:r},c),{},{components:t})):n.createElement(f,l({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},273:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2},l="Writing a CLI",o={unversionedId:"guides/cli",id:"guides/cli",title:"Writing a CLI",description:"Introduction",source:"@site/materials/guides/cli.md",sourceDirName:"guides",slug:"/guides/cli",permalink:"/Flask-ML/materials/guides/cli",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started with Flask-ML",permalink:"/Flask-ML/materials/guides/getting-started"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Server File",id:"server-file",level:2},{value:"CLI File",id:"cli-file",level:2},{value:"Running the CLI",id:"running-the-cli",level:2}],c={toc:p},u="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"writing-a-cli"},"Writing a CLI"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"A CLI is helpful to run and debug code from the terminal. Flask-ML is able to automatically create a CLI for your machine learning code. Generating a CLI is a simple process that involves creating a single file."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"At least one endpoint in your server file must be decorated with ",(0,a.kt)("inlineCode",{parentName:"li"},"@server.route"),", and the route must have a ",(0,a.kt)("inlineCode",{parentName:"li"},"task_schema_func")," parameter. See ",(0,a.kt)("a",{parentName:"li",href:"./getting-started#adding-a-ui-schema"},"Adding a Task Schema")," for more information.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@server.route("/transform_case", task_schema_func=create_transform_case_task_schema)\ndef transform_case(inputs: TransformCaseInputs, parameters: TransformCaseParameters) -> ResponseBody:\n    ...\n')),(0,a.kt)("h2",{id:"server-file"},"Server File"),(0,a.kt)("p",null,"Ensure that your server file has a ",(0,a.kt)("inlineCode",{parentName:"p"},'if __name__ == "__main__":')," block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# server.py\nml_server = MLServer(__name__)\n\nif __name__ == "__main__":\n    ml_server.run()\n')),(0,a.kt)("h2",{id:"cli-file"},"CLI File"),(0,a.kt)("p",null,"Create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"cli.py")," in your project directory, and import your MLServer instance into it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# cli.py\n\nimport argparse\n\nfrom flask_ml.flask_ml_cli import MLCli\nfrom server import ml_server\nfrom small_blk_forensics.backend.server import server\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="Transform Case of multiple text inputs")\n    cli = MLCli(server, parser)\n    cli.run_cli()\n\n\nif __name__ == "__main__":\n    main()\n')),(0,a.kt)("h2",{id:"running-the-cli"},"Running the CLI"),(0,a.kt)("p",null,"That's it! Now, you can run your CLI with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python cli.py\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ python simple_cli.py --help\nusage: simple_cli.py [-h] {transform_case} ...\n\nTransform Case of multiple text inputs\n\npositional arguments:\n  {transform_case}  Subcommands\n    transform_case  Transform Case\n\noptions:\n  -h, --help        show this help message and exit\n\n$ python simple_cli.py transform_case --help\nusage: simple_cli.py transform_case [-h] --text_inputs TEXT_INPUTS [TEXT_INPUTS ...] [--to_case TO_CASE]\n\noptions:\n  -h, --help            show this help message and exit\n  --text_inputs TEXT_INPUTS [TEXT_INPUTS ...]\n                        Text to Transform\n  --to_case {upper,lower}\n                        'upper' will convert all text to upper case. 'lower' will convert all text to lower case.\n")))}m.isMDXComponent=!0}}]);