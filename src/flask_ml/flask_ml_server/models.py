# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2024-10-31T14:51:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class AppMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    info: Annotated[str, Field(description='Markdown content to render on the info page')]
    author: str
    version: str
    name: Annotated[str, Field(examples=['Face Match App'])]


class SchemaAPIRoute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    task_schema: Annotated[str, Field(examples=['/tasks/{name_of_task}/task_schema'])]
    run_task: Annotated[str, Field(examples=['/tasks/{name_of_task}'])]
    payload_schema: Annotated[str, Field(examples=['/tasks/{name_of_task}/payload_schema'])]
    sample_payload: Annotated[Optional[str], Field(examples=['/tasks/{name_of_task}/sample_payload'])] = None
    short_title: Annotated[str, Field(examples=['{A short title for the task}'])]
    order: Annotated[int, Field(examples=[1])]


class NoSchemaAPIRoute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    run_task: Annotated[str, Field(examples=['/tasks/{name_of_task}'])]
    payload_schema: Annotated[Optional[str], Field(examples=['/tasks/{name_of_task}/payload_schema'])] = None
    sample_payload: Annotated[Optional[str], Field(examples=['/tasks/{name_of_task}/sample_payload'])] = None


class FileInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    path: str


class DirectoryInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    path: str


class TextInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str


class BatchFileInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    files: List[FileInput]


class BatchTextInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    texts: List[TextInput]


class BatchDirectoryInput(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    directories: List[DirectoryInput]


class InputType(Enum):
    FILE = 'file'
    DIRECTORY = 'directory'
    TEXT = 'text'
    TEXTAREA = 'textarea'
    BATCHFILE = 'batchfile'
    BATCHTEXT = 'batchtext'
    BATCHDIRECTORY = 'batchdirectory'


class NewFileInputType(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default_name: Annotated[Optional[str], Field(alias='defaultName', examples=['my_file'])] = None
    default_extension: Annotated[str, Field(alias='defaultExtension', examples=['.db'])]
    allowed_extensions: Annotated[Union[Literal['*'], List[str]], Field(alias='allowedExtensions')]
    input_type: Annotated[Optional[Literal['newfile']], Field(alias='inputType')] = 'newfile'


class ParameterType(Enum):
    RANGED_FLOAT = 'ranged_float'
    FLOAT = 'float'
    ENUM = 'enum'
    TEXT = 'text'
    RANGED_INT = 'ranged_int'
    INT = 'int'


class FloatParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = ParameterType.FLOAT
    default: float


class EnumVal(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    label: Optional[str] = None
    key: Optional[str] = None


class EnumParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = ParameterType.ENUM
    enum_vals: Annotated[List[EnumVal], Field(alias='enumVals')]
    message_when_empty: Annotated[Optional[str], Field(alias='messageWhenEmpty')] = None
    default: str


class TextParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = ParameterType.TEXT
    default: str


class IntParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = ParameterType.INT
    default: int


class IntRangeDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    min: int
    max: int


class FloatRangeDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    min: float
    max: float


class ResponseType(Enum):
    FILE = 'file'
    DIRECTORY = 'directory'
    MARKDOWN = 'markdown'
    TEXT = 'text'
    BATCHFILE = 'batchfile'
    BATCHTEXT = 'batchtext'
    BATCHDIRECTORY = 'batchdirectory'


class FileType(Enum):
    IMG = 'img'
    CSV = 'csv'
    JSON = 'json'
    TEXT = 'text'
    AUDIO = 'audio'
    VIDEO = 'video'
    MARKDOWN = 'markdown'


class FileResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.FILE
    file_type: FileType
    path: str
    title: Optional[str] = None
    subtitle: Optional[str] = None


class DirectoryResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.DIRECTORY
    path: str
    title: str
    subtitle: Optional[str] = None


class MarkdownResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.MARKDOWN
    value: str
    title: Optional[str] = None
    subtitle: Optional[str] = None


class TextResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.TEXT
    value: str
    title: Optional[str] = None
    subtitle: Optional[str] = None


class BatchFileResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.BATCHFILE
    files: List[FileResponse]


class BatchTextResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.BATCHTEXT
    texts: List[TextResponse]


class BatchDirectoryResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    output_type: Optional[ResponseType] = ResponseType.BATCHDIRECTORY
    directories: List[DirectoryResponse]


class APIRoutes(RootModel[List[Union[SchemaAPIRoute, NoSchemaAPIRoute]]]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: List[Union[SchemaAPIRoute, NoSchemaAPIRoute]]


class Input(
    RootModel[
        Union[FileInput, DirectoryInput, TextInput, BatchFileInput, BatchTextInput, BatchDirectoryInput]
    ]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Union[FileInput, DirectoryInput, TextInput, BatchFileInput, BatchTextInput, BatchDirectoryInput]


class InputSchema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: str
    label: str
    subtitle: Optional[str] = ''
    input_type: Annotated[Union[InputType, NewFileInputType], Field(alias='inputType')]


class RangedFloatParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = (
        ParameterType.RANGED_FLOAT
    )
    range: FloatRangeDescriptor
    default: float


class RangedIntParameterDescriptor(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameter_type: Annotated[Optional[ParameterType], Field(alias='parameterType')] = (
        ParameterType.RANGED_INT
    )
    range: IntRangeDescriptor
    default: int


class RequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inputs: Dict[str, Input]
    parameters: Dict[str, Any]


class ResponseBody(
    RootModel[
        Union[
            FileResponse,
            DirectoryResponse,
            MarkdownResponse,
            TextResponse,
            BatchFileResponse,
            BatchTextResponse,
            BatchDirectoryResponse,
        ]
    ]
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Union[
        FileResponse,
        DirectoryResponse,
        MarkdownResponse,
        TextResponse,
        BatchFileResponse,
        BatchTextResponse,
        BatchDirectoryResponse,
    ]


class ParameterSchema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: str
    label: str
    subtitle: Optional[str] = ''
    value: Union[
        RangedFloatParameterDescriptor,
        FloatParameterDescriptor,
        EnumParameterDescriptor,
        TextParameterDescriptor,
        RangedIntParameterDescriptor,
        IntParameterDescriptor,
    ]


class TaskSchema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inputs: List[InputSchema]
    parameters: List[ParameterSchema]
